使用调试工具 gdb
gdb 可以帮助你找出程序中具体在哪发生了重复释放。

首先，编译时加入调试符号：

bash
gcc -g -o minishell minishell.c
使用 gdb 运行你的程序：


gdb ./minishell
设置一个在 free() 函数上的断点，以便在调用 free() 时暂停程序：

(gdb) break free
运行程序：

(gdb) run
当程序暂停时，使用 bt 命令查看调用栈：

bash
(gdb) bt



. Using next (n)
The next command allows you to execute the next line of code in the current function, stepping over function calls. This is useful if you want to move line by line within the function without stepping into other functions. If you're inside a function and want to keep stepping through it, you can use:

bash
(gdb) next
When to use next: If you want to debug the flow within the current function (e.g., prompt() in your case) and you don't want to step into every function call (like library functions).
2. Using step (s)
The step command moves to the next line of code, but if the current line is a function call, gdb will step into that function. Use this if you want to trace into the internal workings of a function call.

bash
(gdb) step
When to use step: If you want to trace the program's execution inside a specific function to see exactly what is happening within that function (for example, if you want to trace into prompt() to see where memory is being allocated or freed).
3. Using continue (c)
The continue command resumes the program execution until the next breakpoint or until the program finishes (or crashes). Use this if you've already seen enough and want the program to run until the next issue is encountered.

bash
(gdb) continue
When to use continue: When you're done inspecting the current state and want to see if the program will hit any further breakpoints or errors.
4. Inspecting Variables
Before continuing, you might want to inspect variables related to memory management (e.g., pointers) to understand the state of the program. For example:

To print the value of a pointer or variable:

bash
(gdb) print ptr
To examine memory at a specific address:

bash
(gdb) x/10x 0x413380
This will display the memory content at address 0x413380 (which is where your free() was called on) in hexadecimal.

5. Setting a Watchpoint
If you suspect a particular variable or memory address is being modified unexpectedly, you can set a watchpoint to monitor it:

bash
(gdb) watch ptr
This will stop execution whenever ptr is modified, helping you detect when and where the memory is being altered.
